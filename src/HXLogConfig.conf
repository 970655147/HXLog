# ---------------------- Tools -------------------------------
# tmpFile & buffer & defaultSuffix & defaultCharSet & save, append async?
tmpName = tmp
tmpDir = F:\\tmp
suffix = .txt
buffSize = 2048
estimateFileLines = 100
# use 'Charset.defaultCharset'[got 'currentPorject's encodeType]
# defaultCharSet = utf-8
writeAsync = false
isDebugOn = true

# checkInverval & threadNums
checkInterval = 3000
nThreads = 10

# about what condition is ""[empty]
emptyStrCondition = null;NULL

# about fileName like follow : http://webd.home.news.cn/1.gif?z=1&_wdxid=01002005057000300000000001110
# we need to config "mayBeFileNameSeps" with a "?" for get right filName
mayBeFileNameSeps = ?

# 'logPattern' related to 'Tools.logBeforeTask / logAfterTask / logErrorMsg'
taskBeforeLogPattern = URL : '${url }' \r\n --------------------- [ '${taskName }' start ... ] --------------------------
taskAfterLogPattern = FetchedResult : '${result }' \r\n --------------------- [ '${taskName }' end ... ] -------------------------- \r\n spent '${spent }' ms ...
taskExceptionLogPattern = Exception : '${exception }' \r\n while fetch : '${taskName }', url : '${url }' 

# ---------------------- Log -------------------------------
# some 'Constants' for 'debug'
horizonLines = -----------------------------------
horizonStars = ***********************************
gotThere = get there...
gotNothing = get nothing ~

buffNamePrefix = Logger
buffNameSep = _
# 'Log.log' to console? 'Log.err' to console? 'Log.log' to logFile? 'Log.err' to logFile?  
# config 'logFile'
outToConsole = true
errToConsole = true
outToLogFile = false
errToLogFile = false
outLogBuffName = Log.out
errLogBuffName = Log.err
outLogFilePath = F:\\tmp\\log.log
errLogFilePath = F:\\tmp\\log.log

# sep while 'logWithCRLF', sep while 'log'
# sep while 'log(int[][])', sep while 'log(Map<K, V>)'
defaultSepWhileCRLF = 
defaultSepWhileNotCRLF = ,  
defaultSepWhileTwoDimen = 
defaultMapKVSep = ->

# 'Log.log(String)' append crlf[DEFAULT]?, 'Log.err(String)' append crlf[DEFAULT]?
# 'Log.log(String[])' append crlf[DEFAULT]?, 'Log.err(String[])' append crlf[DEFAULT]?
defaultOutputAppendCrlf = true
defaultErrputAppendCrlf = true
defaultOutputAppendCrlfForContainer = false
defaultErrputAppendCrlfForContainer = false
defaultOutputAppendCrlfForFormat = false
defaultERRputAppendCrlfForFormat = false
defaultIsFormat = true

# related to 'log pattern'
PREFIX = 
CRLF = \r\n
dateFormat = yyyy-MM-dd HH:mm:ss:SSS
usePattern = true
# logPattern = ${PREFIX } [${idx }] [${date }] - [${mode }]  => '${msg }' -> '${handler(filter(length > 4) ) }'
# logPattern = ${PREFIX } [${idx }] [${date }] - [${mode }]  => '${msg }' -> '${handler(map(length > 4 ? subString(0, 3) + '...' : $this ) ) }'
# logPattern = ${PREFIX } [${idx }] [${date }] - [${mode }]  => '${msg }' -> '${handler(map(length > 4) ) }'
# logPattern = >>>> ${PREFIX } ${logIdx } [${mode }] [${idx }] [${date }] [${thread }] [${stackTrace }] => ${CRLF } `${msg }` >>>>
# logPattern = ${logIdx } [${date }] => `${msg }` >>>>
 logPattern = [${date }] [${mode }] : `${msg }`
# logIdxHandlerParser = map('Logger-[' + trim + ']')
logIdxHandlerParser = map('*Logger-' + trim)

# ---------------------- JSONTransferable -------------------------------
# add at 2016.06.19
jsonTUtils = Tools
jsonTIdxMapManager = Constants
jsonTId = id
jsonTForEachEle = ele
jsonTBeanKey = BEAN_KEY
jsonTProtoBeanKey = PROTO_BEAN
jsonTArrIdxMapKey = arrIdxMap
jsonTDefaultLoadIdx = CAMEL
jsonTDefaultFilterIdx = ALL
jsonTIdxSuffix = Idxes
jsonTObjSuffix = Obj
jsonTArrSuffix = Arr


